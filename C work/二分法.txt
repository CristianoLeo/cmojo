二分法：如果确定f(x)在[a,b]区间内连续，且f(a) · f(b) < 0,把[a,b]逐次分半，检查每次
       分半后区间两端点函数值符号的变化，确定有根的区间。

那么，什么情况下用二分法？
需要满足两个条件：上下界确定，且函数在[a,b]内单调

算法竞赛中有两种二分题型：整数二分、实数二分。
1)整数域上的二分法要注意终止边界、左右区间的开闭情况，避免漏掉答案或陷入死循环
2)实数域上的二分法要注意精度问题


两种整数二分

1)"在单调递增序列中找x或x的后继"的定义：在单调递增数列a[]中，如果有x，找第一个x的位置，
  如果没有，找比x大的第一个数的位置

示例：  a[] = {-12,-6,-4,3,5,5,8,9},其中n = 8个数，存储在a[0] ~ a[7].
(1)查找x = -5，返回位置2，指向a[2] = -4
(2)查找x = 7，返回位置6，指向a[6] = 8
(3)特别地，如果x大于最大的a[7] = 9,如x = 12，返回位置8。由于不存在a[8],所以此时是越界的

如何编码？
左端点left，右端点right，二分的中位数mid，每次把区间缩小一半



代码中的mid的计算有多种实现方法，但是没有一种绝对完美的


        实现                              适用场合                    可能出现的问题
mid = (left + right) / 2            left >= 0,right >= 0       （1）left + right可能溢出
                                    left + right 无溢出        （2）负数情况下有向0取整问题

！！！mid = left + (right - left) / 2       left - right无溢出          若right和left都是大数，且
                                                                  一正一负，容易溢出

mid = (left + right) >> 1             left + right无溢出            left + right可能溢出




代码的关键是对mid的处理，如果取值不当，while()很容易陷入死循环

(1)代码中的left = mid + 1能否写成left = mid？
    在实数二分中，确实是right = mid，left = mid，但是整数二分存在取整的问题，如原值left = 2，right = 3
计算得mid = left + (right - left) / 2 = 2,若取left = mid,那么新值仍然是left = 2，right = 3，while()
陷入了死循环。所以写成left = mid + 1不会陷入死循环

(2)不同问题下得mid取值
    上面列举得三种实现情况，mid是向下取整，称为“左中位数”，即mid = left + (right - left) / 2 或
mid = (left + right) >> 1;也可以向上取整，靠近right，称为“右中位数”，即mid = left + (right - left + 1) / 2
或 mid = (left + right + 1) >> 1,此方法适用于另一个问题，即在单调递增序列中找x或x的前驱

(3)谨慎使用mid = (left + right) / 2,原因是除法“/”的取整导致在正负区间左右中位数的计算不一致。
    除法“/”是向0取整的，当(left + right)为负数时，mid = (left + right) / 2向下取整，计算的是右中位数，两者不一致。
另两种mid计算不存在这个问题。(left + right) >> 1在正数和负数情况下都是向下取整的；left + (right - left) / 2
中的(right - left)在任何情况下都不能是负数，相当于向下取整，结果和(left + right) >> 1一样

模板代码：
    while(left < right){
        int ans;
        int mid = left + (right - left) / 2;
        if(check(mid) == true){
            ans = mid;
            //...
        }else{
            //...
        }
    }
二分法的难点在于如何建模和check函数的检查条件，其中可能会套用其他算法



